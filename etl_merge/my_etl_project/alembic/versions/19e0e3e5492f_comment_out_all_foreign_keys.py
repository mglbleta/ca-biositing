"""comment out all foreign keys

Revision ID: 19e0e3e5492f
Revises: 81f96df1e929
Create Date: 2025-10-15 15:19:49.737461

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
import sqlmodel


# revision identifiers, used by Alembic.
revision: str = '19e0e3e5492f'
down_revision: Union[str, Sequence[str], None] = '81f96df1e929'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('analyst_contact',
    sa.Column('analyst_id', sa.Integer(), nullable=False),
    sa.Column('analyst_first_name', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('analyst_last_name', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('analyst_email', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('analyst_affiliation', sa.Integer(), nullable=True),
    sa.PrimaryKeyConstraint('analyst_id')
    )
    op.create_table('import_log',
    sa.Column('import_id', sa.Integer(), nullable=False),
    sa.Column('import_timestamp', sa.DateTime(), nullable=True),
    sa.Column('destination', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('source_file', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('source_type', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('records_imported', sa.Integer(), nullable=True),
    sa.Column('import_status', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('error_log', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('import_user', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.PrimaryKeyConstraint('import_id')
    )
    op.create_table('testusers2',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('fullname', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('nickname', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.drop_table('analysts_contacts')
    op.create_index('idx_analysis_results_parameter_id', 'analysis_results', ['parameter_id'], unique=False)
    op.create_index('uq_analysis_results_experiment_parameter_replicate', 'analysis_results', ['experiment_id', 'parameter_id', 'replicate_no'], unique=True)
    op.create_index(op.f('ix_biomass_biomass_name'), 'biomass', ['biomass_name'], unique=False)
    op.create_index(op.f('ix_biomass_biomass_type_id'), 'biomass', ['biomass_type_id'], unique=False)
    op.alter_column('biomass_availability', 'biomass_id',
               existing_type=sa.VARCHAR(),
               type_=sa.Integer(),
               existing_nullable=False,
               postgresql_using='biomass_id::integer')
    op.create_index(op.f('ix_biomass_availability_biomass_id'), 'biomass_availability', ['biomass_id'], unique=False)
    op.alter_column('biomass_price', 'biomass_id',
               existing_type=sa.VARCHAR(),
               type_=sa.Integer(),
               existing_nullable=False,
               postgresql_using='biomass_id::integer')
    op.create_index(op.f('ix_biomass_price_biomass_id'), 'biomass_price', ['biomass_id'], unique=False)
    op.alter_column('biomass_quality', 'biomass_id',
               existing_type=sa.VARCHAR(),
               type_=sa.Integer(),
               existing_nullable=False,
               postgresql_using='biomass_id::integer')
    op.create_index(op.f('ix_biomass_quality_biomass_id'), 'biomass_quality', ['biomass_id'], unique=False)
    op.create_unique_constraint(None, 'biomass_type', ['biomass_type'])
    op.create_index('idx_data_sources_source_name_id', 'data_sources', ['source_name_id'], unique=False)
    op.create_index('idx_experiment_methods_experiment_id', 'experiment_methods', ['experiment_id'], unique=False)
    op.create_index('idx_experiment_methods_method_id', 'experiment_methods', ['method_id'], unique=False)
    op.create_index('idx_experiments_analysis_type_id', 'experiments', ['analysis_type_id'], unique=False)
    op.create_index('idx_external_dairy_one_biomass_id', 'external_dairy_one', ['biomass_id'], unique=False)
    op.create_index('idx_external_dairy_one_parameter_id', 'external_dairy_one', ['parameter_id'], unique=False)
    op.create_index('idx_external_inl_biofeedstock_library_biomass_id', 'external_inl_biofeedstock_library', ['biomass_id'], unique=False)
    op.create_index('idx_external_phyllis2_analysis_type_id', 'external_phyllis2', ['analysis_type_id'], unique=False)
    op.create_index('idx_external_phyllis2_biomass_id', 'external_phyllis2', ['biomass_id'], unique=False)
    op.alter_column('field_samples', 'sample_id',
               existing_type=sa.INTEGER(),
               nullable=False,
               autoincrement=True)
    op.alter_column('field_samples', 'biomass_id',
               existing_type=sa.VARCHAR(),
               type_=sa.Integer(),
               existing_nullable=False,
               postgresql_using='biomass_id::integer')
    op.alter_column('field_samples', 'created_at',
               existing_type=sa.VARCHAR(),
               type_=sa.DateTime(),
               existing_nullable=False,
               postgresql_using='created_at::timestamp without time zone')
    op.create_index(op.f('ix_field_samples_biomass_id'), 'field_samples', ['biomass_id'], unique=False)
    op.create_index(op.f('ix_field_samples_source_codename_id'), 'field_samples', ['source_codename_id'], unique=False)
    op.create_index('idx_method_equipment_equipment_id', 'method_equipment', ['equipment_id'], unique=False)
    op.create_index('idx_method_equipment_method_id', 'method_equipment', ['method_id'], unique=False)
    op.create_index('idx_methods_method_name', 'methods', ['method_name'], unique=False)
    op.create_index('idx_parameter_units_parameter_id', 'parameter_units', ['parameter_id'], unique=False)
    op.create_index('idx_parameter_units_unit_id', 'parameter_units', ['unit_id'], unique=False)
    op.create_index('idx_preprocessed_samples_biomass_sample_id', 'preprocessed_samples', ['biomass_sample_id'], unique=False)
    op.create_index('idx_preprocessed_samples_prepro_method_id', 'preprocessed_samples', ['prepro_method_id'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index('idx_preprocessed_samples_prepro_method_id', table_name='preprocessed_samples')
    op.drop_index('idx_preprocessed_samples_biomass_sample_id', table_name='preprocessed_samples')
    op.drop_index('idx_parameter_units_unit_id', table_name='parameter_units')
    op.drop_index('idx_parameter_units_parameter_id', table_name='parameter_units')
    op.drop_index('idx_methods_method_name', table_name='methods')
    op.drop_index('idx_method_equipment_method_id', table_name='method_equipment')
    op.drop_index('idx_method_equipment_equipment_id', table_name='method_equipment')
    op.drop_index(op.f('ix_field_samples_source_codename_id'), table_name='field_samples')
    op.drop_index(op.f('ix_field_samples_biomass_id'), table_name='field_samples')
    op.alter_column('field_samples', 'created_at',
               existing_type=sa.DateTime(),
               type_=sa.VARCHAR(),
               existing_nullable=False)
    op.alter_column('field_samples', 'biomass_id',
               existing_type=sa.Integer(),
               type_=sa.VARCHAR(),
               existing_nullable=False)
    op.alter_column('field_samples', 'sample_id',
               existing_type=sa.INTEGER(),
               nullable=True,
               autoincrement=True)
    op.drop_index('idx_external_phyllis2_biomass_id', table_name='external_phyllis2')
    op.drop_index('idx_external_phyllis2_analysis_type_id', table_name='external_phyllis2')
    op.drop_index('idx_external_inl_biofeedstock_library_biomass_id', table_name='external_inl_biofeedstock_library')
    op.drop_index('idx_external_dairy_one_parameter_id', table_name='external_dairy_one')
    op.drop_index('idx_external_dairy_one_biomass_id', table_name='external_dairy_one')
    op.drop_index('idx_experiments_analysis_type_id', table_name='experiments')
    op.drop_index('idx_experiment_methods_method_id', table_name='experiment_methods')
    op.drop_index('idx_experiment_methods_experiment_id', table_name='experiment_methods')
    op.drop_index('idx_data_sources_source_name_id', table_name='data_sources')
    op.drop_constraint(None, 'biomass_type', type_='unique')
    op.drop_index(op.f('ix_biomass_quality_biomass_id'), table_name='biomass_quality')
    op.alter_column('biomass_quality', 'biomass_id',
               existing_type=sa.Integer(),
               type_=sa.VARCHAR(),
               existing_nullable=False)
    op.drop_index(op.f('ix_biomass_price_biomass_id'), table_name='biomass_price')
    op.alter_column('biomass_price', 'biomass_id',
               existing_type=sa.Integer(),
               type_=sa.VARCHAR(),
               existing_nullable=False)
    op.drop_index(op.f('ix_biomass_availability_biomass_id'), table_name='biomass_availability')
    op.alter_column('biomass_availability', 'biomass_id',
               existing_type=sa.Integer(),
               type_=sa.VARCHAR(),
               existing_nullable=False)
    op.drop_index(op.f('ix_biomass_biomass_type_id'), table_name='biomass')
    op.drop_index(op.f('ix_biomass_biomass_name'), table_name='biomass')
    op.drop_index('uq_analysis_results_experiment_parameter_replicate', table_name='analysis_results')
    op.drop_index('idx_analysis_results_parameter_id', table_name='analysis_results')
    op.create_table('analysts_contacts',
    sa.Column('analyst_id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('analyst_first_name', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('analyst_last_name', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('analyst_email', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('analyst_affiliation', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('analyst_id', name=op.f('analysts_contacts_pkey'))
    )
    op.drop_table('testusers2')
    op.drop_table('import_log')
    op.drop_table('analyst_contact')
    # ### end Alembic commands ###
